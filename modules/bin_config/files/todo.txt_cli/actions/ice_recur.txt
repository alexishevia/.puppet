#!/usr/bin/env ruby

require 'ice_cube'
require 'todotxt'   # https://github.com/tylerdooling/todotxt-rb ; gem install todotxt-rb
require 'trollop'

$VERSION='1.1'

opts = Trollop::options do
  version "ice_cube v1.0 by Robin Lee Powell, MIT license.  Some code taken from https://github.com/chuckbjones/todo.txt-cli-addons/blob/master/recur , license unknown"
  banner <<-EOS

  ice_recur

  A recurring item generator for todo.txt.  Yes, there are like 14 of these, but I couldn't find a single one that could do "every 2 weeks", so I wrote my own.

  It's called ice_recur because it relies, heavily, on the ice_cube recurring schedule library, and to avoid collision with the other recur action I was using at the time.

  This script goes in $TODO_DIR/actions/

  It requires ice_cube, todotxt, and trollop, although I can't see how you'd be seeing this message if you hadn't figured that out.

  You put your entries in $TODO_DIR/ice_recur.txt , and add something like this:

      ~/bin/todo.sh ice_recur

  to your crontab, to run once a day.

  Every entry that matches the current day will be added, as long as there is no other entry with the same text content.

  Recurrence Format
  -----------------

  Entries look like:

  @[optional starting date] [timing] - [task]

  like:

  @2016-02-03 Weekly ; day Monday - (B) Mon Recur Test

  Where [timing] is a sequence of timing specifiers seperated by " ; ".  Each timing specifier makes the item more specific.

  The starting date is entirely optional; if specified it 

  Timing Specifiers
  -----------------

  All the timing specifiers, and the sequencing behaviour, is just https://github.com/seejohnrun/ice_cube , except as plain text.

  The code just calls IceCube::Rule methods using whatever you specify.

  Checking The Run
  ----------------

  Run "todo ice_recur check" to check if ice_recur has run to completion in the last 2 days.  Pass an email address as an argument; if the check fails, it'll send email to that address.

  Examples
  --------

  In general, you can check if a timing setup does what you want using the "-s" argument, which will show you when that line will next trigger.


  daily - (A) Runs every day; includes today
  daily 2 - (B) Runs every other day; includes today
  @2016-03-10 daily 2 - Runs every other day, starting on the day specified (which may or may not include today)
  weekly ; day Friday, Sunday - Runs every Friday and Saturday
  monthly ; day_of_month 11, 13 - Runs on the 11th and 13th of every month
  @2016-03-07 Weekly 2 ; day Thursday - Runs on Thursday every second week starting on the first Thursday after the day specified.
  @2016-03-01 Monthly 3 - Runs every 3 months starting on the day specified (so, occurs on the first day of the month; next occurence is 2016-06-01)
  @2016-01-04 Yearly - Runs every year starting on the day specifiod (so, occurs on the 4th of January)

EOS

  opt :test, "Run tests on the recurrence code."
  opt :check, "Check the completion file to see if ice_recur has actually run in the last two days.  Takes an email address to complain to if not as argument.", :type => String
  opt :show_next, "Instead of generating entries, show the next date that each entry *would* run."
end

def make_schedule( rulestr )
  # Get the start date, if any
  startdate = Time.now.to_date
  if rulestr =~ %r{^\s*@}
    startdate = Date.parse(rulestr.sub(%r{^\s*@(\S+)\s.*},'\1'))
    rulestr = rulestr.dup.sub!(%r{^\s*@\S+},'')
  end

  rule=IceCube::Rule
  schedule = IceCube::Schedule.new(startdate.to_time)

  rulestr.split(%r{\s;\s}).each do |rulebit|
    method, argstr = rulebit.strip.split(%r{\s+}, 2)
    method.downcase!

    args = []

    if argstr
      args = argstr.strip.split(%r{\s*,\s*})

      args.map! do |arg|
        if arg =~ %r{day\s*$}
          arg.downcase.to_sym
        elsif arg =~ %r{[0-9]+}
          arg = arg.to_i
        else
          arg
        end
      end
    end

    rule = rule.send(method, *args)
  end

  schedule.add_recurrence_rule rule

  return schedule
end

$tapnum=1
def tapprint( bool, text )
  if bool
    puts "ok #{$tapnum} - #{text}"
  else
    puts "not ok #{$tapnum} - #{text}"
  end
  $tapnum += 1
end

recur_file = File.join(ENV['TODO_DIR'], 'ice_recur.txt')
completed_file = File.join(ENV['TODO_DIR'], '.ice_recur_completed')

if opts[:test]
  curmodays=Date.new(Time.now.year, Time.now.month, -1).day

  puts "1..6"

  tstring="daily"
  schedule = make_schedule( tstring )
  tapprint( schedule.occurs_on?(Date.today), "#{tstring} includes today" )


  tstring="daily 2"
  schedule = make_schedule( tstring )
  tapprint( schedule.occurs_on?(Date.today) &&
      ! schedule.occurs_on?(Date.today + 1) &&
      schedule.occurs_on?(Date.today + 2),
        "#{tstring} includes today, and 2 days from now, but not tomorrow" )

  tstring="@#{(DateTime.now - 1).strftime("%Y-%m-%d")} daily 2"
  schedule = make_schedule( tstring )
  tapprint( 
      schedule.occurs_on?(Date.today - 1) &&
      ! schedule.occurs_on?(Date.today) &&
      schedule.occurs_on?(Date.today + 1) &&
      ! schedule.occurs_on?(Date.today + 2) &&
      schedule.occurs_on?(Date.today + 3) &&
      ! schedule.occurs_on?(Date.today + 4),
        "#{tstring} includes some days and not others, and today is not one of them" )

  tstring="weekly ; day #{%x{date +%w}.to_i}, #{%x{date +%w -d "now + 2 days"}.to_i}"
  schedule = make_schedule( tstring )
  tapprint( schedule.occurs_on?(Date.today) &&
      ! schedule.occurs_on?(Date.today + 1) &&
      schedule.occurs_on?(Date.today + 2) &&
      ! schedule.occurs_on?(Date.today + 4) &&
      ! schedule.occurs_on?(Date.today + 5),
        "#{tstring} includes some days and not others" )

  tstring="weekly ; day #{%x{date +%w}.to_i}, #{%x{date +%w -d "now + 1 days"}.to_i}"
  schedule = make_schedule( tstring )
  tapprint( schedule.occurs_on?(Date.today) &&
      schedule.occurs_on?(Date.today + 1) &&
      ! schedule.occurs_on?(Date.today + 2) &&
      ! schedule.occurs_on?(Date.today + 4) &&
      ! schedule.occurs_on?(Date.today + 5),
        "#{tstring} includes a different set of days" )

  tstring=%Q{weekly ; day #{%x{date +%A}.chomp}, #{%x{date +%A -d "now + 2 days"}.chomp}}
  schedule = make_schedule( tstring )
  tapprint( schedule.occurs_on?(Date.today) &&
      ! schedule.occurs_on?(Date.today + 1) &&
      schedule.occurs_on?(Date.today + 2) &&
      ! schedule.occurs_on?(Date.today + 4) &&
      ! schedule.occurs_on?(Date.today + 5),
        "#{tstring} includes some days and not others" )

  tstring=%Q{weekly ; day #{%x{date +%A}.chomp}, #{%x{date +%A -d "now + 1 days"}.chomp}}
  schedule = make_schedule( tstring )
  tapprint( schedule.occurs_on?(Date.today) &&
      schedule.occurs_on?(Date.today + 1) &&
      ! schedule.occurs_on?(Date.today + 2) &&
      ! schedule.occurs_on?(Date.today + 4) &&
      ! schedule.occurs_on?(Date.today + 5),
        "#{tstring} includes a different set of days" )

  tstring="monthly ; day_of_month #{%x{date +%d}.chomp}, #{%x{date +%d -d "now + 2 days"}.chomp}"
  schedule = make_schedule( tstring )
  tapprint( schedule.occurs_on?(Date.today) &&
      ! schedule.occurs_on?(Date.today + 1) &&
      schedule.occurs_on?(Date.today + 2) &&
      ! schedule.occurs_on?(Date.today + 4) &&
      ! schedule.occurs_on?(Date.today + 5),
        "#{tstring} includes a different set of days" )

elsif opts[:show_next]
  recur_entries = File.read(recur_file).split("\n").reject { |e| e =~ %r{^#} }

  recur_entries.each do |recur|
    schedstr, taskstr = recur.strip.split(%r{\s+-\s+}, 2)
    puts "Schedule: #{schedstr} -- Next Day: #{make_schedule( schedstr ).next_occurrence.strftime("%Y-%m-%d")} -- Text: #{taskstr}"
  end
elsif opts[:check]
  email = opts[:check]

  send_mail = false
  e = nil
  begin
    if Time.now.to_i - File.mtime(completed_file).to_i > 172800
      send_mail = true
    end
  rescue => e
    send_mail = true
  end

  if e
    puts e
    puts e.backtrace
  end

  if send_mail
    print "Sending email.\n"
    print %x{echo "File #{completed_file} is more than two days old, or something else weird happened.\n" | mailx -s 'ERROR: ice_recur has not run in 2 days!' #{email}}
  else
    print "File #{completed_file} has been touched recently; looks good.\n"
  end
else
  # Get our recur entries
  # Drop everything that looks like a comment or blank
  recur_entries = File.read(recur_file).split("\n").reject { |e| e =~ %r{(^\s*#|^\s*$)} }
  bad_entries = recur_entries.reject { |e| e =~ %r{^(@[0-9-]+ )?[A-Za-z;0-9\s]+ - } }
  if bad_entries.length > 0
    raise "Bad entries found in #{recur_file}: \n#{bad_entries.join("\n")}"
  end

  # Make a backup
  todo_file = File.join(ENV['TODO_DIR'], 'todo.txt')
  orig_todo_data = File.read(todo_file)
  orig_todo_time = File.mtime(todo_file).to_i

  begin
    File.open(todo_file, 'r+') do |todo_fh|
      todo_list = TodoTxt::List.from_file(todo_fh)

      recur_entries.each do |recur|
        schedstr, taskstr = recur.strip.split(%r{\s+-\s+}, 2)
        if make_schedule( schedstr ).occurs_on?(Date.today)
          puts "- Recur matches today: #{schedstr} --- #{taskstr}"
          task = TodoTxt::Task.parse(taskstr)
          task[:created_at] = DateTime.now
          found_task = todo_list.select { |t| t.text == task.text }.first
          if found_task
            puts "    - Duplicate task exists: #{found_task.text}"
          else
            puts "    -  No duplicate found for #{taskstr}"
            puts "    -  Adding #{taskstr}"

            todo_list << task
            todo_fh.rewind
            todo_fh.truncate(todo_fh.pos)
            todo_list.to_file(todo_fh)
            todo_fh.write("\n")
          end
        end
      end
    end
  rescue => e
    if File.mtime(todo_file).to_i != orig_todo_time
      puts "FAILURE: Something went wrong; reverting #{todo_file}: #{e}; #{e.backtrace.join("\n")}"
      File.open(todo_file, 'w') { |file| file.puts orig_todo_data }
    else
      puts "FAILURE: Something went wrong: #{e}; #{e.backtrace.join("\n")}"
    end
    exit 1
  end

  # Mark the "we've actually run" file
  require 'fileutils'
  FileUtils.touch completed_file
end
